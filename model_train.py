'''
Author: Ashish Katlam
Description: This code trains the malware detection model

'''

from pymongo import MongoClient
from core2 import create_vector_single
import pickle
import datetime
import sys
from sklearn import svm
from constants import DB_NAME, ALG_TYPES
import random
from sklearn.feature_selection import SelectFromModel
from sklearn.svm import LinearSVC
from sklearn.pipeline import Pipeline
import numpy

# Connect to the database
client = MongoClient()
db = client['sumak']

# List holding features of goodware apks
feature_vector_good = []
target_vector_good = []

# List holding features of malware apks
feature_vector_bad = []
target_vector_bad = []


# Select all goodware apks from database
for apk1 in db.apk.find({'data_type': 'goodware'}):
	feature_vector_good.append(create_vector_single(apk1))
	target_vector_good.append(0)

# Select all malware apks from database
for apk2 in db.apk.find({'data_type':'malware'}):
	feature_vector_bad.append(create_vector_single(apk2))
	target_vector_bad.append(1)



trainLength = int(0.6*len(feature_vector_good))

# Training Data
trainX = [x for x in feature_vector_good[:trainLength]]
trainX.extend([x for x in feature_vector_bad[:trainLength]])

trainY = [x for x in target_vector_good[:trainLength]]
trainY.extend([x for x in target_vector_bad[:trainLength]])

# Testing Data
testX = [x for x in feature_vector_good[trainLength:]]
testX.extend([x for x in feature_vector_bad[trainLength:]])

testY = [x for x in target_vector_good[trainLength:]]
testY.extend([x for x in target_vector_bad[trainLength:]])



# Feature Selection using Linear Support Vector Classifier
lsvc = LinearSVC(C=0.01, penalty="l1", dual=False).fit(trainX, trainY)
model = SelectFromModel(lsvc, prefit=True)
pickle.dump( model, open( "feature_model.p", "wb" ) )
trainX_new = model.transform(trainX)
testX_new = model.transform(testX)


print 'Training the data....'
train_result = {'timestamp': datetime.datetime.now(),'alg_type': 'svm'}
clf = svm.SVC()
clf.fit(trainX_new, trainY)
print 'Accuracy: {:.3f}%'.format(clf.score(testX_new, testY)*100)
pickle.dump( clf, open( "new_train_data.p", "wb" ) )

s_object = pickle.dumps(clf)
s_object = s_object.encode('base64')
train_result['train_data'] = s_object
db['train'].insert_one(train_result)
print "[+] Data trained and added to database"

